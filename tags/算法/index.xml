<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>算法 on YY的主页</title>
    <link>/tags/%E7%AE%97%E6%B3%95/</link>
    <description>Recent content in 算法 on YY的主页</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 28 Aug 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>二分查找</title>
      <link>/blog/cs/algorithms_binary-search/</link>
      <pubDate>Fri, 28 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_binary-search/</guid>
      <description>I. 定义 二分法是一种通常用在排序数据集或者不完全排序的数据集中查寻元素的一种算法。其清晰的逻辑，简单的时间复杂度（O(logn)）使得其非常流行。
II. 二分法的思路 二分法的思路非常简单，我们用一个简单的问题来解释一下。
假设我们的问题是在一个[1, 2, 3, 4, ..., 99, 100]的数组中找到70这个数的index。解决这个问题我们最开始想到的思路就是遍历整个数组，把70和index 1, index 2, &amp;hellip;index 100 的数比较，最终找到其位置。但是我们知道，这样的算法时间复杂度为O(n), 在实际操作中是非常没有效率的。那么二分法又是怎么来解决这个问题的呢？
二分法顾名思义，就是将数据集首先从中间切开，分成左右两个子数据集。然后判断出查询的数据集在哪个子数据集中，接着对这个子数据集做这样的递归操作，直到找到要查找的对象或者数据集不可再分为止。
在数组nums = [1, 2, 3, 4, ..., 99, 100]的数组中找到target = 70这个数的index的问题中，二分法的过程是这样的：
 找到中位数也就是index为49的数——50，接着判断target是否等于它。如果等于直接返回中位数的index，如果不等于就继续。 将数组拆分为[1, 2 ,..., 49, 50]和[51, 52, ... 99, 100]两个数组。如果target大于中位数,那么对右侧的子数组再次执行一遍二分法，反之则对左侧子数组执行。 一直循环二分法下去直到找到target或者子数组无法再分为止。  III. 四重境界 二分法的使用分为四重境界。随着境界的提升，难度会加大。让我们依次来分析它们。注意，一定要使二分法不会陷入死循环。
第一境界——在排序数组上进行二分 在排序数组上使用二分法是最自然的想法，过程就如同在上述二分法思路的那样进行。模板代码如下：
Java
public int binarySearch(int[] nums, int start, int end, int target) { while (start + 1 &amp;lt; end) { int mid = start + (end - start) / 2; if (nums[mid] == target) { return mid; }else if (nums[mid] &amp;lt; target) { start = mid; } else { end = mid; } } if (nums[start] == target) { return start; } if (nums[end] == target) { return end; } return -1; }  其步骤是如下：</description>
    </item>
    
    <item>
      <title>双指针算法之快慢指针</title>
      <link>/blog/cs/algorithms_fast-slow-points/</link>
      <pubDate>Wed, 05 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_fast-slow-points/</guid>
      <description>在上一篇博文中，我们讨论了左右对撞指针，今天我们来讨论另外一种双指针算法——快慢指针。
I. 定义 快慢指针是双指针算法中的一种。不同于左右对撞指针，快慢指针中的两个指针是从同一侧但以不同的策略移动的指针。因此，两个指针中会有一个移动较快的快指针（fast）和一个较慢的慢指针（slow）。当快指针移动到数组的顶端时，停止遍历或进行新一轮遍历。
Note：由于链表中指针无法往回走的特性，快慢指针在链表中使用非常频繁。遇到链表题目时，应当考虑快慢指针。
II. 实现方法 实现快慢指针算法通常分为以下几个步骤：
 将快慢两个指针指向集合的头部。 移动快指针到满足快慢指针的位置。 通过while循环使用快慢指针遍历集合。 返回结果  Note：为了避免fast指向null，有时需要将快慢指针指向集合的head的前一位。实现这个步骤，我们需要定义一个不干扰结果的对象dummy，并将它的next对象指向集合的head。
III. 经典习题 1) Remove Nth Node From End of List(Leetcode 19)
Given a linked list, remove the n-th node from the end of list and return its head.
这道题目是一道典型的在链表上使用快慢指针解决的题目。题意为输入一个链表和一个Integer n，删除其从后往前数第n位的值，并返回新的链表。n的输入永远是合规的。
这道题目的解题 思路是这样的。我们设置快慢两个指针，令快指针先走n步，再同时移动快慢指针，直到快指针走到链表的底部。这时候删除慢指针指向的后一个对象，然后返回新的链表。
Note：为了避免输入长度为1的链表，删除其中唯一的一项时，快指针会首先走一位指向null的情况出现，我们要在链表的head前增设一个dummy对象。
解题步骤如下：
 设置dummy对象其next指向head，避免fast指到null。  ListNode dummy = new ListNode(0); dummy.next = head;   设置快慢两个指针指向dummy。  ListNode slow = dummy; ListNode fast = dummy;   通过for循环让快指针先移动n次。  for (int i=0; i&amp;lt;n; i++){ fast = fast.</description>
    </item>
    
    <item>
      <title>双指针算法之左右对撞指针</title>
      <link>/blog/cs/algorithms_two-points/</link>
      <pubDate>Mon, 03 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_two-points/</guid>
      <description>在上一篇博文中，我们讨论了Java中指针的定义和使用。这篇文章我们就来聊一聊一种在数组和链表中很常见的算法——双指针算法。
I. 定义 双指针是指在遍历集合中的对象是，不仅仅采用单个指针进行访问，而是使用两个指针，以不同的方式对集合进行扫描从而达到相应目的的算法。一般来说，双指针的扫描方式分为两种：一种是两个指针按照相反的方向进行扫描，直到两个指针相撞为止，这类算法被称作左右对撞指针算法；另一种是两个指针按照相同的方向进行扫描，但是运动的条件不相同，在这种状况下往往一个指针走的相对快，另一个相对慢，所以这类算法被成为快慢指针算法。这篇文章专门讲解左右对撞指针，而下篇博文会专门来讲解快慢指针。
II. 分类  左右对撞指针 快慢指针  III. 左右对撞指针 a. 定义 左右对撞指针通常在有序数组（sorted array）中被使用。一般将左侧的指针定义为左指针（left），右侧的指针定义为右指针（right），然后两个指针从两头向中间进行数组的遍历。当左右指针碰撞时，也就是left&amp;gt;right时，停止遍历。
Note: 左右对撞指针适用于有序数组（sorted array）。所以在遇到有序数组时，我们应当第一个想到用左右对撞指针来解决问题。当然，在无序数组中，此方法也有应用。
b. 实现方法 实现左右对撞指针算法，通常分为以下几个步骤：
 对无序数组进行排序。 将左右指针分别指向数组的左右两端 使用while循环进行遍历，当左指针和右指针相撞时，停止。 设置左右两个指针的移动条件以及移动方式 记录结果  c. 经典习题 1) Container With Most Water（Leetcode 11)
Given n non-negative integers a1, a2, &amp;hellip;, an , where each represents a point at coordinate (i, ai). n vertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0).</description>
    </item>
    
    <item>
      <title>Java中的&#34;指针&#34;——引用变量</title>
      <link>/blog/cs/point/</link>
      <pubDate>Sun, 02 Aug 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/point/</guid>
      <description>指针是一种在众多编程语言中非常常见的概念，它的使用非常广泛。实际上，Java为了避免使用上的繁琐，其设计者用引用变量的概念代替了指针，但是实际使用上，两者比较类似，所以本文依旧以指针为题来讲述此类概念。下面我们就来介绍一下指针的概念。
在介绍指针之前，我们首先要弄清楚Java中的两大重要储存空间——堆和栈。为了使用上的方便，堆(Heap)和栈(Stack)分别用来储存不同的东西。下表对比了两者的特点：
   储存区域 储存内容 优点 缺点 回收     栈 基本类型的变量和对象的引用变量 存取速度比堆要快，仅次于寄存器，栈数据可以共享 存在栈中的数据大小与生存期必须是确定的，缺乏灵活性。栈中主要存放一些基本类型的变量 当超过变量的作用域后，Java会自动释放掉该变量,内存空间可以立即被另作他用   堆 由new等指令创建的对象和数组 可以动态地分配内存大小，生存期也不必事先告诉编译器 由于要在运行时动态分配内存，存取速度较慢 由Java虚拟机的自动垃圾回收器来回收不再使用的数据    为了更加形象的解释这些概念，我们不妨看一看下面的例子：
A a = new A();  上述代码是在Java编程中时常会会出现的，我们来好好的分析一下，这样简单的一行代码究竟是做了什么。实际上，这小小的一行代码是做了三件事情，这行代码的前半部分申明了引用变量a为A类型，并将其储存到栈(Stack)当中并分配了一个储存地址给它, 其代码为：
A a;  接着，这行代码创建了一个新的类型为A的对象，这个过程用关键字new来实现，创建的新对象被储存在堆Heap里，并被分配了一个储存地址，其代码为：
new A();  最后，这行代码中的等号&amp;rdquo;=&amp;ldquo;将储存在堆里的引用变量a指向了栈里新创建的对象A(),这个指的过程用储存地址来实现，也就是说，等号将两个储存地址配对并连接了起来。
Note: 值得注意的是，在Java中，使用引用变量时，等号&amp;rdquo;=&amp;ldquo;并不是给等号左边的变量赋上右边的新值的意思，而是将等号左边的变量指向右边的对象的地址的意思。当人们将一个引用变量先等于对象a，再等于另一个对象b时，并不是将储存在堆(Heap)中的a对象的值改变成了b，而是将引用变量指向对象a的指针断开，接着将指针指向了对象b。下面我们用一个例子来解释这个过程：
在一个足球队中，有很多球员，而只有一个队长。有的时候，我们想要更换队长，这个例子用来实现这个过程。我们首先创建两个球员——洛里和凯恩(对象包括球员的姓，名和踢球的位置)：
Player llorris = new Player(&amp;quot;Llprris&amp;quot;, &amp;quot;Hugo&amp;quot;, &amp;quot;Goalkeeper&amp;quot;); Player kane = new Player(&amp;quot;Kane&amp;quot;, &amp;quot;Harry&amp;quot;, &amp;quot;Center Forward&amp;quot;);  其实这两行代码实现了如下图的情况：
也就是在栈(Stack)中首先申明了引用变量llorris和kane，接着在堆(Heap)中创建了两个Player对象，最后将左边的引用变量指向右边对应的对象。
这时候，我们首先将队长设置为洛里，代码为：
Player captain = llorris;  通过这行代码，我们首先申明了引用变量captain，并将其指向变量llorris指向的对象。其情况如下图所示：</description>
    </item>
    
    <item>
      <title>动态规划算法（Dynamic-Programming）</title>
      <link>/blog/cs/algorithms_dynamic_programming/</link>
      <pubDate>Tue, 28 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_dynamic_programming/</guid>
      <description>Those who cannot remember the past are condemned to repeat it.
 那些不记得过去的人被谴责在重复过去。正是因为人能够站在过去的经验上更进一步，才能像堆积木一样，将成就越堆越高。今天我就来讲讲一个按照这种思路所设计的算法——动态规划。
I. 定义 动态规划（Dynamic-Programming, 简称DP）是一种在数学、计算机科学、管理学和经济学等等学科中使用的一种将一个复杂问题分解为相对简单的子问题，根据子问题的结果来最终解决复杂问题的一种方法。
试想一下，如果问你1+2+3+&amp;hellip;+100 = ?这个问题时，是不是不那么容易计算出来？但是如果这个时候告诉你1+2+3+&amp;hellip;+99 = 4950时，你就能很快的知道1+2+3+&amp;hellip;+100 = 4950+100 = 5050.其实，这就是动态规划的思维。简而言之，动态规划算法的核心就是记住已经解决过的子问题的解，并根据这个解去解决相对复杂一点的问题，通过一层一层的求解，最终可以解决很复杂的问题。
下图是应用动态规划算法解决斐波那契数列的经典例子。假如问题是想计算出fib(6)的值，那么我们就必须先计算出fib(5)和fib(4)的值，要知道fib(4)的值，我们又需要先知道fib(3)和fib(2的值)，以此类推到最底层。因为我们知道fib(1)和fib(2)=1，那么可以因此求得fib(3)，然后求得fib(4)&amp;hellip;最终求得fib(6)。这整个过程就是一个动态规划的过程。
II. 实现方法 实现动态规划算法，我们往往需要四个步骤：
 选择状态变量 初始化 确定状态转移返程 储存结果  1. 选择状态变量
在这一步中，我们需要将问题拆分为多阶段的子问题。设置状态变量，其在前一阶段中被计算出来，并在后一阶段被使用。如下图所示，阶段1中的结果B, C被传入阶段2，并通过他们计算出结果D,C然后传入阶段3用于计算出最终结果F。这些变量便是状态变量。
2. 初始化
在这一步中，我们需要设置边界，也就是在什么情况下停止。在菲波那切数列中边界是fib(1)=1, fib(2)=1。
3. 确定转移方程
转移方程是一种方程，其描述了当前子问题的状态变量与上一层的状态变量之间的关系。在菲波那切数列中，转移方程就是fib(n) = fib(n-1) + fib(n-2)。
4.储存结果
在这一步中设置结果变量用于储存结果。
III. 经典习题  Unique Paths(Leetcode 62)  A robot is located at the top-left corner of a m x n grid (marked &amp;lsquo;Start&amp;rsquo; in the diagram below).</description>
    </item>
    
    <item>
      <title>广度优先搜索算法（Breadth-First-Search）</title>
      <link>/blog/cs/algorithms_breadth-first-search/</link>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_breadth-first-search/</guid>
      <description>上次在介绍完功能强大的深度优先搜索算法(DFS)后，这次我来给大家介绍一下另一个功能类似且同样强大的经典算法——广度优先搜索算法 Breadth-First-Search（BFS）。
I. 算法定义 BFS同DFS一样，是一种用于遍历、搜索树或图的一种搜索算法。与DFS会先一路走到黑不同，BFS会从根节点开始搜索，在每一个路口面临分叉的时候，先把每个岔路记录下来，然后再去一个一个的往前走一步。
左下图是BFS搜索路线的一个例子。加入我们要找的是节点5。BFS首先搜索根节点0，然后会依次搜索它的两个子节点(节点1,节点2)，路线为：0-&amp;gt;1-&amp;gt;2。接着会去搜索节点1和节点2的子节点（节点3，4，5，6），所以最终路线为：0-&amp;gt;1-&amp;gt;2-&amp;gt;3-&amp;gt;4-&amp;gt;5。
II. 实现方法 由于BFS会在每个岔路口首先储存所有岔道的特性，通常BFS会和Queue（先进先出）一同使用。步骤如下：
 将根节点加入到Queue中 使用while循环，当Queue为空时，结束循环。 将Queue中的节点依次poll出来检查。 如果没有找到要找的值，就将poll出来的节点的子节点再加入到Queue中（如果没有子节点就不加）。  III. 经典习题  Minimum Depth of Binary Tree(Leetcode 111)  Given a binary tree, find its minimum depth.
The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.
Note: A leaf is a node with no children.
这道题非常简单，找到一个最浅的节点，其没有子节点并返回它的深度。
需要的变量:
Queue&amp;lt;TreeNode&amp;gt; queue = new LinkedList&amp;lt;&amp;gt;(); int depth = 0;  Queue queue, int depth。</description>
    </item>
    
    <item>
      <title>深度优先搜索算法（Deep-First-Search）</title>
      <link>/blog/cs/algorithms_deep-first-search/</link>
      <pubDate>Sat, 25 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/blog/cs/algorithms_deep-first-search/</guid>
      <description>最近在学习算法与数据结构，在了解了费曼学习法后，我决定写一个专栏来专门讲述这方面的知识。一方面可以以讲带学最有效率的掌握知识，二来可以将知识分享给大家，除此之外在未来还可以查看他们来复习知识，真是个一举三得的事情，话不多说，我们就开始吧，今天首先从”深度优先搜索“（DFS）算法开始。
I. 算法定义 DFS是一种用于遍历、搜索树或图的一种搜索算法。搜索的灵感顾名思义：先递归下去，再回溯上来。意思是说，当人们需要在图、搜索树或者遍历中搜索某个Object时，DFS会首先一路走到底，直到不能再下，如果找到了对象，就return回去，没有找到就回溯到上一步的地方，然后换一条路继续一路走到黑重复以上过程直到找到对象或者找遍所有Object为止。
右下图是DFS在查找树上应用的例子。假如我们要找的值为节点2，DFS会首先按一个路线走到不能再走，也就是0-&amp;gt;1-&amp;gt;3。因为节点3没有子节点了，DFS会回到上一级，也就是节点1的位置，然后按照另一条路走到黑。也就是0-&amp;gt;1-&amp;gt;3-&amp;gt;4。由于4没有子节点，DFS会回到节点1，然后节点1所有的子节点都已经去过了，于是乎再回到节点0，然后去到节点2，最终找到它，路线就是0-&amp;gt;1-&amp;gt;3-&amp;gt;4-&amp;gt;2。
DFS是一种非常古老的算法，早在古希腊神话中，雅典城的英雄忒休斯正是靠着阿里阿德涅之线在米诺斯王宫找到了米诺陶诺斯之牛并杀掉它为民除害的。
II. 实现方法 通常DFS用递归(Recursion)来实现。步骤如下：
 首先设置递归的边界，当遇到边界（走到底时）停止递归。 设置递归的过程。  III. 经典习题  Same Tree (Leetcode 100)  Given two binary trees, write a function to check if they are the same or not.
Two binary trees are considered the same if they are structurally identical and the nodes have the same value.
这道题非常的简单，判断两个binary tree是否相同。按照DFS算法的思路，我们步骤如下：
 设置递归的边界，也就是当两棵树的中的一棵的节点没有子节点时，停止递归。
 如果两棵树中某个相同位置节点的值不一样，return false。
 如果两棵树中某个相同位置节点的值一样，那么执行递归, 判断此节点的左右两个子节点是否相等直到没有子节点为止。
代码
  /** * Definition for a binary tree node.</description>
    </item>
    
  </channel>
</rss>